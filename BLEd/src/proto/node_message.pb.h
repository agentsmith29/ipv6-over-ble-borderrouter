// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_5fmessage_2eproto;
namespace BLEd_message {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeConnectionInfo;
class NodeConnectionInfoDefaultTypeInternal;
extern NodeConnectionInfoDefaultTypeInternal _NodeConnectionInfo_default_instance_;
class NodeConnnectionParameters;
class NodeConnnectionParametersDefaultTypeInternal;
extern NodeConnnectionParametersDefaultTypeInternal _NodeConnnectionParameters_default_instance_;
class NodesList;
class NodesListDefaultTypeInternal;
extern NodesListDefaultTypeInternal _NodesList_default_instance_;
}  // namespace BLEd_message
PROTOBUF_NAMESPACE_OPEN
template<> ::BLEd_message::Node* Arena::CreateMaybeMessage<::BLEd_message::Node>(Arena*);
template<> ::BLEd_message::NodeConnectionInfo* Arena::CreateMaybeMessage<::BLEd_message::NodeConnectionInfo>(Arena*);
template<> ::BLEd_message::NodeConnnectionParameters* Arena::CreateMaybeMessage<::BLEd_message::NodeConnnectionParameters>(Arena*);
template<> ::BLEd_message::NodesList* Arena::CreateMaybeMessage<::BLEd_message::NodesList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BLEd_message {

// ===================================================================

class NodeConnectionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BLEd_message.NodeConnectionInfo) */ {
 public:
  NodeConnectionInfo();
  virtual ~NodeConnectionInfo();

  NodeConnectionInfo(const NodeConnectionInfo& from);
  NodeConnectionInfo(NodeConnectionInfo&& from) noexcept
    : NodeConnectionInfo() {
    *this = ::std::move(from);
  }

  inline NodeConnectionInfo& operator=(const NodeConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeConnectionInfo& operator=(NodeConnectionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeConnectionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const NodeConnectionInfo*>(
               &_NodeConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeConnectionInfo& a, NodeConnectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeConnectionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeConnectionInfo* New() const final {
    return CreateMaybeMessage<NodeConnectionInfo>(nullptr);
  }

  NodeConnectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeConnectionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeConnectionInfo& from);
  void MergeFrom(const NodeConnectionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeConnectionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BLEd_message.NodeConnectionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fmessage_2eproto);
    return ::descriptor_table_node_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kTypeFieldNumber = 2,
    kOutFieldNumber = 3,
    kStateFieldNumber = 4,
    kLinkModeFieldNumber = 5,
  };
  // int32 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 out = 3;
  void clear_out();
  ::PROTOBUF_NAMESPACE_ID::int32 out() const;
  void set_out(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out() const;
  void _internal_set_out(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 4;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 link_mode = 5;
  void clear_link_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 link_mode() const;
  void set_link_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_mode() const;
  void _internal_set_link_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BLEd_message.NodeConnectionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class NodeConnnectionParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BLEd_message.NodeConnnectionParameters) */ {
 public:
  NodeConnnectionParameters();
  virtual ~NodeConnnectionParameters();

  NodeConnnectionParameters(const NodeConnnectionParameters& from);
  NodeConnnectionParameters(NodeConnnectionParameters&& from) noexcept
    : NodeConnnectionParameters() {
    *this = ::std::move(from);
  }

  inline NodeConnnectionParameters& operator=(const NodeConnnectionParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeConnnectionParameters& operator=(NodeConnnectionParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeConnnectionParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeConnnectionParameters* internal_default_instance() {
    return reinterpret_cast<const NodeConnnectionParameters*>(
               &_NodeConnnectionParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeConnnectionParameters& a, NodeConnnectionParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeConnnectionParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeConnnectionParameters* New() const final {
    return CreateMaybeMessage<NodeConnnectionParameters>(nullptr);
  }

  NodeConnnectionParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeConnnectionParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeConnnectionParameters& from);
  void MergeFrom(const NodeConnnectionParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeConnnectionParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BLEd_message.NodeConnnectionParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fmessage_2eproto);
    return ::descriptor_table_node_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnIntervalMinFieldNumber = 1,
    kConnIntervalMaxFieldNumber = 2,
    kConnLatencyFieldNumber = 3,
    kSupervisionTimeoutFieldNumber = 4,
    kMinimumCeLengthFieldNumber = 5,
    kMaximumCeLengthFieldNumber = 6,
  };
  // int32 conn_interval_min = 1;
  void clear_conn_interval_min();
  ::PROTOBUF_NAMESPACE_ID::int32 conn_interval_min() const;
  void set_conn_interval_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conn_interval_min() const;
  void _internal_set_conn_interval_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 conn_interval_max = 2;
  void clear_conn_interval_max();
  ::PROTOBUF_NAMESPACE_ID::int32 conn_interval_max() const;
  void set_conn_interval_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conn_interval_max() const;
  void _internal_set_conn_interval_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 conn_latency = 3;
  void clear_conn_latency();
  ::PROTOBUF_NAMESPACE_ID::int32 conn_latency() const;
  void set_conn_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conn_latency() const;
  void _internal_set_conn_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 supervision_timeout = 4;
  void clear_supervision_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 supervision_timeout() const;
  void set_supervision_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_supervision_timeout() const;
  void _internal_set_supervision_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minimum_ce_length = 5;
  void clear_minimum_ce_length();
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_ce_length() const;
  void set_minimum_ce_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minimum_ce_length() const;
  void _internal_set_minimum_ce_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maximum_ce_length = 6;
  void clear_maximum_ce_length();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_ce_length() const;
  void set_maximum_ce_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_ce_length() const;
  void _internal_set_maximum_ce_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BLEd_message.NodeConnnectionParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_interval_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_interval_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_latency_;
  ::PROTOBUF_NAMESPACE_ID::int32 supervision_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_ce_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_ce_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BLEd_message.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BLEd_message.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fmessage_2eproto);
    return ::descriptor_table_node_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHwAddressFieldNumber = 1,
    kNameFieldNumber = 4,
    kIpv6AddressFieldNumber = 5,
    kLocalLinkAddressFieldNumber = 6,
    kConnInfoFieldNumber = 7,
    kConnParameterFieldNumber = 8,
    kHwAddressTypeFieldNumber = 2,
    kConnectionStateFieldNumber = 3,
  };
  // string hw_address = 1;
  void clear_hw_address();
  const std::string& hw_address() const;
  void set_hw_address(const std::string& value);
  void set_hw_address(std::string&& value);
  void set_hw_address(const char* value);
  void set_hw_address(const char* value, size_t size);
  std::string* mutable_hw_address();
  std::string* release_hw_address();
  void set_allocated_hw_address(std::string* hw_address);
  private:
  const std::string& _internal_hw_address() const;
  void _internal_set_hw_address(const std::string& value);
  std::string* _internal_mutable_hw_address();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ipv6_address = 5;
  void clear_ipv6_address();
  const std::string& ipv6_address() const;
  void set_ipv6_address(const std::string& value);
  void set_ipv6_address(std::string&& value);
  void set_ipv6_address(const char* value);
  void set_ipv6_address(const char* value, size_t size);
  std::string* mutable_ipv6_address();
  std::string* release_ipv6_address();
  void set_allocated_ipv6_address(std::string* ipv6_address);
  private:
  const std::string& _internal_ipv6_address() const;
  void _internal_set_ipv6_address(const std::string& value);
  std::string* _internal_mutable_ipv6_address();
  public:

  // string localLinkAddress = 6;
  void clear_locallinkaddress();
  const std::string& locallinkaddress() const;
  void set_locallinkaddress(const std::string& value);
  void set_locallinkaddress(std::string&& value);
  void set_locallinkaddress(const char* value);
  void set_locallinkaddress(const char* value, size_t size);
  std::string* mutable_locallinkaddress();
  std::string* release_locallinkaddress();
  void set_allocated_locallinkaddress(std::string* locallinkaddress);
  private:
  const std::string& _internal_locallinkaddress() const;
  void _internal_set_locallinkaddress(const std::string& value);
  std::string* _internal_mutable_locallinkaddress();
  public:

  // .BLEd_message.NodeConnectionInfo conn_info = 7;
  bool has_conn_info() const;
  private:
  bool _internal_has_conn_info() const;
  public:
  void clear_conn_info();
  const ::BLEd_message::NodeConnectionInfo& conn_info() const;
  ::BLEd_message::NodeConnectionInfo* release_conn_info();
  ::BLEd_message::NodeConnectionInfo* mutable_conn_info();
  void set_allocated_conn_info(::BLEd_message::NodeConnectionInfo* conn_info);
  private:
  const ::BLEd_message::NodeConnectionInfo& _internal_conn_info() const;
  ::BLEd_message::NodeConnectionInfo* _internal_mutable_conn_info();
  public:

  // .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
  bool has_conn_parameter() const;
  private:
  bool _internal_has_conn_parameter() const;
  public:
  void clear_conn_parameter();
  const ::BLEd_message::NodeConnnectionParameters& conn_parameter() const;
  ::BLEd_message::NodeConnnectionParameters* release_conn_parameter();
  ::BLEd_message::NodeConnnectionParameters* mutable_conn_parameter();
  void set_allocated_conn_parameter(::BLEd_message::NodeConnnectionParameters* conn_parameter);
  private:
  const ::BLEd_message::NodeConnnectionParameters& _internal_conn_parameter() const;
  ::BLEd_message::NodeConnnectionParameters* _internal_mutable_conn_parameter();
  public:

  // int32 hw_address_type = 2;
  void clear_hw_address_type();
  ::PROTOBUF_NAMESPACE_ID::int32 hw_address_type() const;
  void set_hw_address_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hw_address_type() const;
  void _internal_set_hw_address_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 connection_state = 3;
  void clear_connection_state();
  ::PROTOBUF_NAMESPACE_ID::int32 connection_state() const;
  void set_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connection_state() const;
  void _internal_set_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BLEd_message.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hw_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locallinkaddress_;
  ::BLEd_message::NodeConnectionInfo* conn_info_;
  ::BLEd_message::NodeConnnectionParameters* conn_parameter_;
  ::PROTOBUF_NAMESPACE_ID::int32 hw_address_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 connection_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class NodesList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BLEd_message.NodesList) */ {
 public:
  NodesList();
  virtual ~NodesList();

  NodesList(const NodesList& from);
  NodesList(NodesList&& from) noexcept
    : NodesList() {
    *this = ::std::move(from);
  }

  inline NodesList& operator=(const NodesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodesList& operator=(NodesList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodesList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodesList* internal_default_instance() {
    return reinterpret_cast<const NodesList*>(
               &_NodesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NodesList& a, NodesList& b) {
    a.Swap(&b);
  }
  inline void Swap(NodesList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodesList* New() const final {
    return CreateMaybeMessage<NodesList>(nullptr);
  }

  NodesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodesList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodesList& from);
  void MergeFrom(const NodesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodesList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BLEd_message.NodesList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5fmessage_2eproto);
    return ::descriptor_table_node_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnNodesFieldNumber = 1,
  };
  // repeated .BLEd_message.Node conn_nodes = 1;
  int conn_nodes_size() const;
  private:
  int _internal_conn_nodes_size() const;
  public:
  void clear_conn_nodes();
  ::BLEd_message::Node* mutable_conn_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BLEd_message::Node >*
      mutable_conn_nodes();
  private:
  const ::BLEd_message::Node& _internal_conn_nodes(int index) const;
  ::BLEd_message::Node* _internal_add_conn_nodes();
  public:
  const ::BLEd_message::Node& conn_nodes(int index) const;
  ::BLEd_message::Node* add_conn_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BLEd_message::Node >&
      conn_nodes() const;

  // @@protoc_insertion_point(class_scope:BLEd_message.NodesList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BLEd_message::Node > conn_nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeConnectionInfo

// int32 handle = 1;
inline void NodeConnectionInfo::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::handle() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.handle)
  return _internal_handle();
}
inline void NodeConnectionInfo::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
}
inline void NodeConnectionInfo::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.handle)
}

// int32 type = 2;
inline void NodeConnectionInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::type() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.type)
  return _internal_type();
}
inline void NodeConnectionInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void NodeConnectionInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.type)
}

// int32 out = 3;
inline void NodeConnectionInfo::clear_out() {
  out_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::_internal_out() const {
  return out_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::out() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.out)
  return _internal_out();
}
inline void NodeConnectionInfo::_internal_set_out(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  out_ = value;
}
inline void NodeConnectionInfo::set_out(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.out)
}

// int32 state = 4;
inline void NodeConnectionInfo::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::state() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.state)
  return _internal_state();
}
inline void NodeConnectionInfo::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void NodeConnectionInfo::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.state)
}

// int32 link_mode = 5;
inline void NodeConnectionInfo::clear_link_mode() {
  link_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::_internal_link_mode() const {
  return link_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnectionInfo::link_mode() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.link_mode)
  return _internal_link_mode();
}
inline void NodeConnectionInfo::_internal_set_link_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  link_mode_ = value;
}
inline void NodeConnectionInfo::set_link_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_mode(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.link_mode)
}

// -------------------------------------------------------------------

// NodeConnnectionParameters

// int32 conn_interval_min = 1;
inline void NodeConnnectionParameters::clear_conn_interval_min() {
  conn_interval_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::_internal_conn_interval_min() const {
  return conn_interval_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::conn_interval_min() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_interval_min)
  return _internal_conn_interval_min();
}
inline void NodeConnnectionParameters::_internal_set_conn_interval_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_interval_min_ = value;
}
inline void NodeConnnectionParameters::set_conn_interval_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_conn_interval_min(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_interval_min)
}

// int32 conn_interval_max = 2;
inline void NodeConnnectionParameters::clear_conn_interval_max() {
  conn_interval_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::_internal_conn_interval_max() const {
  return conn_interval_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::conn_interval_max() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_interval_max)
  return _internal_conn_interval_max();
}
inline void NodeConnnectionParameters::_internal_set_conn_interval_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_interval_max_ = value;
}
inline void NodeConnnectionParameters::set_conn_interval_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_conn_interval_max(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_interval_max)
}

// int32 conn_latency = 3;
inline void NodeConnnectionParameters::clear_conn_latency() {
  conn_latency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::_internal_conn_latency() const {
  return conn_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::conn_latency() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_latency)
  return _internal_conn_latency();
}
inline void NodeConnnectionParameters::_internal_set_conn_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_latency_ = value;
}
inline void NodeConnnectionParameters::set_conn_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_conn_latency(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_latency)
}

// int32 supervision_timeout = 4;
inline void NodeConnnectionParameters::clear_supervision_timeout() {
  supervision_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::_internal_supervision_timeout() const {
  return supervision_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::supervision_timeout() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.supervision_timeout)
  return _internal_supervision_timeout();
}
inline void NodeConnnectionParameters::_internal_set_supervision_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  supervision_timeout_ = value;
}
inline void NodeConnnectionParameters::set_supervision_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_supervision_timeout(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.supervision_timeout)
}

// int32 minimum_ce_length = 5;
inline void NodeConnnectionParameters::clear_minimum_ce_length() {
  minimum_ce_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::_internal_minimum_ce_length() const {
  return minimum_ce_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::minimum_ce_length() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.minimum_ce_length)
  return _internal_minimum_ce_length();
}
inline void NodeConnnectionParameters::_internal_set_minimum_ce_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minimum_ce_length_ = value;
}
inline void NodeConnnectionParameters::set_minimum_ce_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minimum_ce_length(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.minimum_ce_length)
}

// int32 maximum_ce_length = 6;
inline void NodeConnnectionParameters::clear_maximum_ce_length() {
  maximum_ce_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::_internal_maximum_ce_length() const {
  return maximum_ce_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeConnnectionParameters::maximum_ce_length() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.maximum_ce_length)
  return _internal_maximum_ce_length();
}
inline void NodeConnnectionParameters::_internal_set_maximum_ce_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maximum_ce_length_ = value;
}
inline void NodeConnnectionParameters::set_maximum_ce_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_ce_length(value);
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.maximum_ce_length)
}

// -------------------------------------------------------------------

// Node

// string hw_address = 1;
inline void Node::clear_hw_address() {
  hw_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::hw_address() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.hw_address)
  return _internal_hw_address();
}
inline void Node::set_hw_address(const std::string& value) {
  _internal_set_hw_address(value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.hw_address)
}
inline std::string* Node::mutable_hw_address() {
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.hw_address)
  return _internal_mutable_hw_address();
}
inline const std::string& Node::_internal_hw_address() const {
  return hw_address_.GetNoArena();
}
inline void Node::_internal_set_hw_address(const std::string& value) {
  
  hw_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_hw_address(std::string&& value) {
  
  hw_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BLEd_message.Node.hw_address)
}
inline void Node::set_hw_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hw_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.hw_address)
}
inline void Node::set_hw_address(const char* value, size_t size) {
  
  hw_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.hw_address)
}
inline std::string* Node::_internal_mutable_hw_address() {
  
  return hw_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_hw_address() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.hw_address)
  
  return hw_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_hw_address(std::string* hw_address) {
  if (hw_address != nullptr) {
    
  } else {
    
  }
  hw_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hw_address);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.hw_address)
}

// int32 hw_address_type = 2;
inline void Node::clear_hw_address_type() {
  hw_address_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_hw_address_type() const {
  return hw_address_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::hw_address_type() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.hw_address_type)
  return _internal_hw_address_type();
}
inline void Node::_internal_set_hw_address_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hw_address_type_ = value;
}
inline void Node::set_hw_address_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hw_address_type(value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.hw_address_type)
}

// int32 connection_state = 3;
inline void Node::clear_connection_state() {
  connection_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_connection_state() const {
  return connection_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::connection_state() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.connection_state)
  return _internal_connection_state();
}
inline void Node::_internal_set_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connection_state_ = value;
}
inline void Node::set_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connection_state(value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.connection_state)
}

// string name = 4;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.name)
  return _internal_name();
}
inline void Node::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.name)
}
inline std::string* Node::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.name)
  return _internal_mutable_name();
}
inline const std::string& Node::_internal_name() const {
  return name_.GetNoArena();
}
inline void Node::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BLEd_message.Node.name)
}
inline void Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.name)
}
inline std::string* Node::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.name)
}

// string ipv6_address = 5;
inline void Node::clear_ipv6_address() {
  ipv6_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::ipv6_address() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.ipv6_address)
  return _internal_ipv6_address();
}
inline void Node::set_ipv6_address(const std::string& value) {
  _internal_set_ipv6_address(value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.ipv6_address)
}
inline std::string* Node::mutable_ipv6_address() {
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.ipv6_address)
  return _internal_mutable_ipv6_address();
}
inline const std::string& Node::_internal_ipv6_address() const {
  return ipv6_address_.GetNoArena();
}
inline void Node::_internal_set_ipv6_address(const std::string& value) {
  
  ipv6_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_ipv6_address(std::string&& value) {
  
  ipv6_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BLEd_message.Node.ipv6_address)
}
inline void Node::set_ipv6_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.ipv6_address)
}
inline void Node::set_ipv6_address(const char* value, size_t size) {
  
  ipv6_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.ipv6_address)
}
inline std::string* Node::_internal_mutable_ipv6_address() {
  
  return ipv6_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_ipv6_address() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.ipv6_address)
  
  return ipv6_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_ipv6_address(std::string* ipv6_address) {
  if (ipv6_address != nullptr) {
    
  } else {
    
  }
  ipv6_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6_address);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.ipv6_address)
}

// string localLinkAddress = 6;
inline void Node::clear_locallinkaddress() {
  locallinkaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::locallinkaddress() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.localLinkAddress)
  return _internal_locallinkaddress();
}
inline void Node::set_locallinkaddress(const std::string& value) {
  _internal_set_locallinkaddress(value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.localLinkAddress)
}
inline std::string* Node::mutable_locallinkaddress() {
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.localLinkAddress)
  return _internal_mutable_locallinkaddress();
}
inline const std::string& Node::_internal_locallinkaddress() const {
  return locallinkaddress_.GetNoArena();
}
inline void Node::_internal_set_locallinkaddress(const std::string& value) {
  
  locallinkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_locallinkaddress(std::string&& value) {
  
  locallinkaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BLEd_message.Node.localLinkAddress)
}
inline void Node::set_locallinkaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locallinkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.localLinkAddress)
}
inline void Node::set_locallinkaddress(const char* value, size_t size) {
  
  locallinkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.localLinkAddress)
}
inline std::string* Node::_internal_mutable_locallinkaddress() {
  
  return locallinkaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_locallinkaddress() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.localLinkAddress)
  
  return locallinkaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_locallinkaddress(std::string* locallinkaddress) {
  if (locallinkaddress != nullptr) {
    
  } else {
    
  }
  locallinkaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locallinkaddress);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.localLinkAddress)
}

// .BLEd_message.NodeConnectionInfo conn_info = 7;
inline bool Node::_internal_has_conn_info() const {
  return this != internal_default_instance() && conn_info_ != nullptr;
}
inline bool Node::has_conn_info() const {
  return _internal_has_conn_info();
}
inline void Node::clear_conn_info() {
  if (GetArenaNoVirtual() == nullptr && conn_info_ != nullptr) {
    delete conn_info_;
  }
  conn_info_ = nullptr;
}
inline const ::BLEd_message::NodeConnectionInfo& Node::_internal_conn_info() const {
  const ::BLEd_message::NodeConnectionInfo* p = conn_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BLEd_message::NodeConnectionInfo*>(
      &::BLEd_message::_NodeConnectionInfo_default_instance_);
}
inline const ::BLEd_message::NodeConnectionInfo& Node::conn_info() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.conn_info)
  return _internal_conn_info();
}
inline ::BLEd_message::NodeConnectionInfo* Node::release_conn_info() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.conn_info)
  
  ::BLEd_message::NodeConnectionInfo* temp = conn_info_;
  conn_info_ = nullptr;
  return temp;
}
inline ::BLEd_message::NodeConnectionInfo* Node::_internal_mutable_conn_info() {
  
  if (conn_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BLEd_message::NodeConnectionInfo>(GetArenaNoVirtual());
    conn_info_ = p;
  }
  return conn_info_;
}
inline ::BLEd_message::NodeConnectionInfo* Node::mutable_conn_info() {
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.conn_info)
  return _internal_mutable_conn_info();
}
inline void Node::set_allocated_conn_info(::BLEd_message::NodeConnectionInfo* conn_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conn_info_;
  }
  if (conn_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conn_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conn_info, submessage_arena);
    }
    
  } else {
    
  }
  conn_info_ = conn_info;
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.conn_info)
}

// .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
inline bool Node::_internal_has_conn_parameter() const {
  return this != internal_default_instance() && conn_parameter_ != nullptr;
}
inline bool Node::has_conn_parameter() const {
  return _internal_has_conn_parameter();
}
inline void Node::clear_conn_parameter() {
  if (GetArenaNoVirtual() == nullptr && conn_parameter_ != nullptr) {
    delete conn_parameter_;
  }
  conn_parameter_ = nullptr;
}
inline const ::BLEd_message::NodeConnnectionParameters& Node::_internal_conn_parameter() const {
  const ::BLEd_message::NodeConnnectionParameters* p = conn_parameter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BLEd_message::NodeConnnectionParameters*>(
      &::BLEd_message::_NodeConnnectionParameters_default_instance_);
}
inline const ::BLEd_message::NodeConnnectionParameters& Node::conn_parameter() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.conn_parameter)
  return _internal_conn_parameter();
}
inline ::BLEd_message::NodeConnnectionParameters* Node::release_conn_parameter() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.conn_parameter)
  
  ::BLEd_message::NodeConnnectionParameters* temp = conn_parameter_;
  conn_parameter_ = nullptr;
  return temp;
}
inline ::BLEd_message::NodeConnnectionParameters* Node::_internal_mutable_conn_parameter() {
  
  if (conn_parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::BLEd_message::NodeConnnectionParameters>(GetArenaNoVirtual());
    conn_parameter_ = p;
  }
  return conn_parameter_;
}
inline ::BLEd_message::NodeConnnectionParameters* Node::mutable_conn_parameter() {
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.conn_parameter)
  return _internal_mutable_conn_parameter();
}
inline void Node::set_allocated_conn_parameter(::BLEd_message::NodeConnnectionParameters* conn_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conn_parameter_;
  }
  if (conn_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conn_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conn_parameter, submessage_arena);
    }
    
  } else {
    
  }
  conn_parameter_ = conn_parameter;
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.conn_parameter)
}

// -------------------------------------------------------------------

// NodesList

// repeated .BLEd_message.Node conn_nodes = 1;
inline int NodesList::_internal_conn_nodes_size() const {
  return conn_nodes_.size();
}
inline int NodesList::conn_nodes_size() const {
  return _internal_conn_nodes_size();
}
inline void NodesList::clear_conn_nodes() {
  conn_nodes_.Clear();
}
inline ::BLEd_message::Node* NodesList::mutable_conn_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BLEd_message::Node >*
NodesList::mutable_conn_nodes() {
  // @@protoc_insertion_point(field_mutable_list:BLEd_message.NodesList.conn_nodes)
  return &conn_nodes_;
}
inline const ::BLEd_message::Node& NodesList::_internal_conn_nodes(int index) const {
  return conn_nodes_.Get(index);
}
inline const ::BLEd_message::Node& NodesList::conn_nodes(int index) const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodesList.conn_nodes)
  return _internal_conn_nodes(index);
}
inline ::BLEd_message::Node* NodesList::_internal_add_conn_nodes() {
  return conn_nodes_.Add();
}
inline ::BLEd_message::Node* NodesList::add_conn_nodes() {
  // @@protoc_insertion_point(field_add:BLEd_message.NodesList.conn_nodes)
  return _internal_add_conn_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BLEd_message::Node >&
NodesList::conn_nodes() const {
  // @@protoc_insertion_point(field_list:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BLEd_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_5fmessage_2eproto
