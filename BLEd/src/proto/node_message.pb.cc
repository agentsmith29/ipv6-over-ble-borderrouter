// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_message.proto

#include "node_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_node_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_node_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeConnectionInfo_node_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeConnnectionParameters_node_5fmessage_2eproto;
namespace BLEd_message {
class NodeConnectionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeConnectionInfo> _instance;
} _NodeConnectionInfo_default_instance_;
class NodeConnnectionParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeConnnectionParameters> _instance;
} _NodeConnnectionParameters_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class NodesListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodesList> _instance;
} _NodesList_default_instance_;
}  // namespace BLEd_message
static void InitDefaultsscc_info_Node_node_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BLEd_message::_Node_default_instance_;
    new (ptr) ::BLEd_message::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BLEd_message::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_node_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Node_node_5fmessage_2eproto}, {
      &scc_info_NodeConnectionInfo_node_5fmessage_2eproto.base,
      &scc_info_NodeConnnectionParameters_node_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_NodeConnectionInfo_node_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BLEd_message::_NodeConnectionInfo_default_instance_;
    new (ptr) ::BLEd_message::NodeConnectionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BLEd_message::NodeConnectionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeConnectionInfo_node_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeConnectionInfo_node_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_NodeConnnectionParameters_node_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BLEd_message::_NodeConnnectionParameters_default_instance_;
    new (ptr) ::BLEd_message::NodeConnnectionParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BLEd_message::NodeConnnectionParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeConnnectionParameters_node_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeConnnectionParameters_node_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_NodesList_node_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BLEd_message::_NodesList_default_instance_;
    new (ptr) ::BLEd_message::NodesList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BLEd_message::NodesList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodesList_node_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodesList_node_5fmessage_2eproto}, {
      &scc_info_Node_node_5fmessage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_5fmessage_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_node_5fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnectionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnectionInfo, handle_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnectionInfo, type_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnectionInfo, out_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnectionInfo, state_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnectionInfo, link_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnnectionParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnnectionParameters, conn_interval_min_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnnectionParameters, conn_interval_max_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnnectionParameters, conn_latency_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnnectionParameters, supervision_timeout_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnnectionParameters, minimum_ce_length_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodeConnnectionParameters, maximum_ce_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, hw_address_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, hw_address_type_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, connection_state_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, name_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, ipv6_address_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, locallinkaddress_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, conn_info_),
  PROTOBUF_FIELD_OFFSET(::BLEd_message::Node, conn_parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BLEd_message::NodesList, conn_nodes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BLEd_message::NodeConnectionInfo)},
  { 10, -1, sizeof(::BLEd_message::NodeConnnectionParameters)},
  { 21, -1, sizeof(::BLEd_message::Node)},
  { 34, -1, sizeof(::BLEd_message::NodesList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BLEd_message::_NodeConnectionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BLEd_message::_NodeConnnectionParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BLEd_message::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BLEd_message::_NodesList_default_instance_),
};

const char descriptor_table_protodef_node_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022node_message.proto\022\014BLEd_message\"a\n\022No"
  "deConnectionInfo\022\016\n\006handle\030\001 \001(\005\022\014\n\004type"
  "\030\002 \001(\005\022\013\n\003out\030\003 \001(\005\022\r\n\005state\030\004 \001(\005\022\021\n\tli"
  "nk_mode\030\005 \001(\005\"\272\001\n\031NodeConnnectionParamet"
  "ers\022\031\n\021conn_interval_min\030\001 \001(\005\022\031\n\021conn_i"
  "nterval_max\030\002 \001(\005\022\024\n\014conn_latency\030\003 \001(\005\022"
  "\033\n\023supervision_timeout\030\004 \001(\005\022\031\n\021minimum_"
  "ce_length\030\005 \001(\005\022\031\n\021maximum_ce_length\030\006 \001"
  "(\005\"\201\002\n\004Node\022\022\n\nhw_address\030\001 \001(\t\022\027\n\017hw_ad"
  "dress_type\030\002 \001(\005\022\030\n\020connection_state\030\003 \001"
  "(\005\022\014\n\004name\030\004 \001(\t\022\024\n\014ipv6_address\030\005 \001(\t\022\030"
  "\n\020localLinkAddress\030\006 \001(\t\0223\n\tconn_info\030\007 "
  "\001(\0132 .BLEd_message.NodeConnectionInfo\022\?\n"
  "\016conn_parameter\030\010 \001(\0132\'.BLEd_message.Nod"
  "eConnnectionParameters\"3\n\tNodesList\022&\n\nc"
  "onn_nodes\030\001 \003(\0132\022.BLEd_message.Nodeb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_5fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_node_5fmessage_2eproto_sccs[4] = {
  &scc_info_Node_node_5fmessage_2eproto.base,
  &scc_info_NodeConnectionInfo_node_5fmessage_2eproto.base,
  &scc_info_NodeConnnectionParameters_node_5fmessage_2eproto.base,
  &scc_info_NodesList_node_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_5fmessage_2eproto_once;
static bool descriptor_table_node_5fmessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_5fmessage_2eproto = {
  &descriptor_table_node_5fmessage_2eproto_initialized, descriptor_table_protodef_node_5fmessage_2eproto, "node_message.proto", 643,
  &descriptor_table_node_5fmessage_2eproto_once, descriptor_table_node_5fmessage_2eproto_sccs, descriptor_table_node_5fmessage_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_node_5fmessage_2eproto::offsets,
  file_level_metadata_node_5fmessage_2eproto, 4, file_level_enum_descriptors_node_5fmessage_2eproto, file_level_service_descriptors_node_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_node_5fmessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_node_5fmessage_2eproto), true);
namespace BLEd_message {

// ===================================================================

void NodeConnectionInfo::InitAsDefaultInstance() {
}
class NodeConnectionInfo::_Internal {
 public:
};

NodeConnectionInfo::NodeConnectionInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLEd_message.NodeConnectionInfo)
}
NodeConnectionInfo::NodeConnectionInfo(const NodeConnectionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_mode_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(link_mode_));
  // @@protoc_insertion_point(copy_constructor:BLEd_message.NodeConnectionInfo)
}

void NodeConnectionInfo::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_mode_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(link_mode_));
}

NodeConnectionInfo::~NodeConnectionInfo() {
  // @@protoc_insertion_point(destructor:BLEd_message.NodeConnectionInfo)
  SharedDtor();
}

void NodeConnectionInfo::SharedDtor() {
}

void NodeConnectionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeConnectionInfo& NodeConnectionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeConnectionInfo_node_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void NodeConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BLEd_message.NodeConnectionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_mode_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(link_mode_));
  _internal_metadata_.Clear();
}

const char* NodeConnectionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          link_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeConnectionInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLEd_message.NodeConnectionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 handle = 1;
  if (this->handle() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_handle(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 out = 3;
  if (this->out() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_out(), target);
  }

  // int32 state = 4;
  if (this->state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_state(), target);
  }

  // int32 link_mode = 5;
  if (this->link_mode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_link_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLEd_message.NodeConnectionInfo)
  return target;
}

size_t NodeConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BLEd_message.NodeConnectionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_handle());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 out = 3;
  if (this->out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out());
  }

  // int32 state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 link_mode = 5;
  if (this->link_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeConnectionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLEd_message.NodeConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeConnectionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeConnectionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLEd_message.NodeConnectionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLEd_message.NodeConnectionInfo)
    MergeFrom(*source);
  }
}

void NodeConnectionInfo::MergeFrom(const NodeConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLEd_message.NodeConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.handle() != 0) {
    _internal_set_handle(from._internal_handle());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.out() != 0) {
    _internal_set_out(from._internal_out());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.link_mode() != 0) {
    _internal_set_link_mode(from._internal_link_mode());
  }
}

void NodeConnectionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLEd_message.NodeConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConnectionInfo::CopyFrom(const NodeConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLEd_message.NodeConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConnectionInfo::IsInitialized() const {
  return true;
}

void NodeConnectionInfo::InternalSwap(NodeConnectionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(handle_, other->handle_);
  swap(type_, other->type_);
  swap(out_, other->out_);
  swap(state_, other->state_);
  swap(link_mode_, other->link_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeConnectionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeConnnectionParameters::InitAsDefaultInstance() {
}
class NodeConnnectionParameters::_Internal {
 public:
};

NodeConnnectionParameters::NodeConnnectionParameters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLEd_message.NodeConnnectionParameters)
}
NodeConnnectionParameters::NodeConnnectionParameters(const NodeConnnectionParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&conn_interval_min_, &from.conn_interval_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_ce_length_) -
    reinterpret_cast<char*>(&conn_interval_min_)) + sizeof(maximum_ce_length_));
  // @@protoc_insertion_point(copy_constructor:BLEd_message.NodeConnnectionParameters)
}

void NodeConnnectionParameters::SharedCtor() {
  ::memset(&conn_interval_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_ce_length_) -
      reinterpret_cast<char*>(&conn_interval_min_)) + sizeof(maximum_ce_length_));
}

NodeConnnectionParameters::~NodeConnnectionParameters() {
  // @@protoc_insertion_point(destructor:BLEd_message.NodeConnnectionParameters)
  SharedDtor();
}

void NodeConnnectionParameters::SharedDtor() {
}

void NodeConnnectionParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeConnnectionParameters& NodeConnnectionParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeConnnectionParameters_node_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void NodeConnnectionParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:BLEd_message.NodeConnnectionParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&conn_interval_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_ce_length_) -
      reinterpret_cast<char*>(&conn_interval_min_)) + sizeof(maximum_ce_length_));
  _internal_metadata_.Clear();
}

const char* NodeConnnectionParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 conn_interval_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          conn_interval_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 conn_interval_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          conn_interval_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 conn_latency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          conn_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 supervision_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          supervision_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minimum_ce_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          minimum_ce_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maximum_ce_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maximum_ce_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeConnnectionParameters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLEd_message.NodeConnnectionParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 conn_interval_min = 1;
  if (this->conn_interval_min() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_conn_interval_min(), target);
  }

  // int32 conn_interval_max = 2;
  if (this->conn_interval_max() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_conn_interval_max(), target);
  }

  // int32 conn_latency = 3;
  if (this->conn_latency() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_conn_latency(), target);
  }

  // int32 supervision_timeout = 4;
  if (this->supervision_timeout() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_supervision_timeout(), target);
  }

  // int32 minimum_ce_length = 5;
  if (this->minimum_ce_length() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_minimum_ce_length(), target);
  }

  // int32 maximum_ce_length = 6;
  if (this->maximum_ce_length() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_maximum_ce_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLEd_message.NodeConnnectionParameters)
  return target;
}

size_t NodeConnnectionParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BLEd_message.NodeConnnectionParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 conn_interval_min = 1;
  if (this->conn_interval_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_conn_interval_min());
  }

  // int32 conn_interval_max = 2;
  if (this->conn_interval_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_conn_interval_max());
  }

  // int32 conn_latency = 3;
  if (this->conn_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_conn_latency());
  }

  // int32 supervision_timeout = 4;
  if (this->supervision_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_supervision_timeout());
  }

  // int32 minimum_ce_length = 5;
  if (this->minimum_ce_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minimum_ce_length());
  }

  // int32 maximum_ce_length = 6;
  if (this->maximum_ce_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_ce_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeConnnectionParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLEd_message.NodeConnnectionParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeConnnectionParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeConnnectionParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLEd_message.NodeConnnectionParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLEd_message.NodeConnnectionParameters)
    MergeFrom(*source);
  }
}

void NodeConnnectionParameters::MergeFrom(const NodeConnnectionParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLEd_message.NodeConnnectionParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.conn_interval_min() != 0) {
    _internal_set_conn_interval_min(from._internal_conn_interval_min());
  }
  if (from.conn_interval_max() != 0) {
    _internal_set_conn_interval_max(from._internal_conn_interval_max());
  }
  if (from.conn_latency() != 0) {
    _internal_set_conn_latency(from._internal_conn_latency());
  }
  if (from.supervision_timeout() != 0) {
    _internal_set_supervision_timeout(from._internal_supervision_timeout());
  }
  if (from.minimum_ce_length() != 0) {
    _internal_set_minimum_ce_length(from._internal_minimum_ce_length());
  }
  if (from.maximum_ce_length() != 0) {
    _internal_set_maximum_ce_length(from._internal_maximum_ce_length());
  }
}

void NodeConnnectionParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLEd_message.NodeConnnectionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConnnectionParameters::CopyFrom(const NodeConnnectionParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLEd_message.NodeConnnectionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConnnectionParameters::IsInitialized() const {
  return true;
}

void NodeConnnectionParameters::InternalSwap(NodeConnnectionParameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(conn_interval_min_, other->conn_interval_min_);
  swap(conn_interval_max_, other->conn_interval_max_);
  swap(conn_latency_, other->conn_latency_);
  swap(supervision_timeout_, other->supervision_timeout_);
  swap(minimum_ce_length_, other->minimum_ce_length_);
  swap(maximum_ce_length_, other->maximum_ce_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeConnnectionParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::BLEd_message::_Node_default_instance_._instance.get_mutable()->conn_info_ = const_cast< ::BLEd_message::NodeConnectionInfo*>(
      ::BLEd_message::NodeConnectionInfo::internal_default_instance());
  ::BLEd_message::_Node_default_instance_._instance.get_mutable()->conn_parameter_ = const_cast< ::BLEd_message::NodeConnnectionParameters*>(
      ::BLEd_message::NodeConnnectionParameters::internal_default_instance());
}
class Node::_Internal {
 public:
  static const ::BLEd_message::NodeConnectionInfo& conn_info(const Node* msg);
  static const ::BLEd_message::NodeConnnectionParameters& conn_parameter(const Node* msg);
};

const ::BLEd_message::NodeConnectionInfo&
Node::_Internal::conn_info(const Node* msg) {
  return *msg->conn_info_;
}
const ::BLEd_message::NodeConnnectionParameters&
Node::_Internal::conn_parameter(const Node* msg) {
  return *msg->conn_parameter_;
}
Node::Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLEd_message.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hw_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hw_address().empty()) {
    hw_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hw_address_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_address().empty()) {
    ipv6_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipv6_address_);
  }
  locallinkaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locallinkaddress().empty()) {
    locallinkaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locallinkaddress_);
  }
  if (from._internal_has_conn_info()) {
    conn_info_ = new ::BLEd_message::NodeConnectionInfo(*from.conn_info_);
  } else {
    conn_info_ = nullptr;
  }
  if (from._internal_has_conn_parameter()) {
    conn_parameter_ = new ::BLEd_message::NodeConnnectionParameters(*from.conn_parameter_);
  } else {
    conn_parameter_ = nullptr;
  }
  ::memcpy(&hw_address_type_, &from.hw_address_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&connection_state_) -
    reinterpret_cast<char*>(&hw_address_type_)) + sizeof(connection_state_));
  // @@protoc_insertion_point(copy_constructor:BLEd_message.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_node_5fmessage_2eproto.base);
  hw_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locallinkaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&conn_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_state_) -
      reinterpret_cast<char*>(&conn_info_)) + sizeof(connection_state_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:BLEd_message.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  hw_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locallinkaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conn_info_;
  if (this != internal_default_instance()) delete conn_parameter_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_node_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:BLEd_message.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hw_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locallinkaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && conn_info_ != nullptr) {
    delete conn_info_;
  }
  conn_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && conn_parameter_ != nullptr) {
    delete conn_parameter_;
  }
  conn_parameter_ = nullptr;
  ::memset(&hw_address_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_state_) -
      reinterpret_cast<char*>(&hw_address_type_)) + sizeof(connection_state_));
  _internal_metadata_.Clear();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hw_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_hw_address(), ptr, ctx, "BLEd_message.Node.hw_address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hw_address_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hw_address_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 connection_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          connection_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "BLEd_message.Node.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipv6_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ipv6_address(), ptr, ctx, "BLEd_message.Node.ipv6_address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string localLinkAddress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_locallinkaddress(), ptr, ctx, "BLEd_message.Node.localLinkAddress");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BLEd_message.NodeConnectionInfo conn_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_conn_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_conn_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLEd_message.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hw_address = 1;
  if (this->hw_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hw_address().data(), static_cast<int>(this->_internal_hw_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.hw_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hw_address(), target);
  }

  // int32 hw_address_type = 2;
  if (this->hw_address_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hw_address_type(), target);
  }

  // int32 connection_state = 3;
  if (this->connection_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_connection_state(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string ipv6_address = 5;
  if (this->ipv6_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6_address().data(), static_cast<int>(this->_internal_ipv6_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.ipv6_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipv6_address(), target);
  }

  // string localLinkAddress = 6;
  if (this->locallinkaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locallinkaddress().data(), static_cast<int>(this->_internal_locallinkaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.localLinkAddress");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_locallinkaddress(), target);
  }

  // .BLEd_message.NodeConnectionInfo conn_info = 7;
  if (this->has_conn_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::conn_info(this), target, stream);
  }

  // .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
  if (this->has_conn_parameter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::conn_parameter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLEd_message.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BLEd_message.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hw_address = 1;
  if (this->hw_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hw_address());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ipv6_address = 5;
  if (this->ipv6_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6_address());
  }

  // string localLinkAddress = 6;
  if (this->locallinkaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locallinkaddress());
  }

  // .BLEd_message.NodeConnectionInfo conn_info = 7;
  if (this->has_conn_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conn_info_);
  }

  // .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
  if (this->has_conn_parameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conn_parameter_);
  }

  // int32 hw_address_type = 2;
  if (this->hw_address_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hw_address_type());
  }

  // int32 connection_state = 3;
  if (this->connection_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connection_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLEd_message.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLEd_message.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLEd_message.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLEd_message.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hw_address().size() > 0) {

    hw_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hw_address_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ipv6_address().size() > 0) {

    ipv6_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipv6_address_);
  }
  if (from.locallinkaddress().size() > 0) {

    locallinkaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locallinkaddress_);
  }
  if (from.has_conn_info()) {
    _internal_mutable_conn_info()->::BLEd_message::NodeConnectionInfo::MergeFrom(from._internal_conn_info());
  }
  if (from.has_conn_parameter()) {
    _internal_mutable_conn_parameter()->::BLEd_message::NodeConnnectionParameters::MergeFrom(from._internal_conn_parameter());
  }
  if (from.hw_address_type() != 0) {
    _internal_set_hw_address_type(from._internal_hw_address_type());
  }
  if (from.connection_state() != 0) {
    _internal_set_connection_state(from._internal_connection_state());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLEd_message.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLEd_message.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hw_address_.Swap(&other->hw_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv6_address_.Swap(&other->ipv6_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locallinkaddress_.Swap(&other->locallinkaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(conn_info_, other->conn_info_);
  swap(conn_parameter_, other->conn_parameter_);
  swap(hw_address_type_, other->hw_address_type_);
  swap(connection_state_, other->connection_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodesList::InitAsDefaultInstance() {
}
class NodesList::_Internal {
 public:
};

NodesList::NodesList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLEd_message.NodesList)
}
NodesList::NodesList(const NodesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      conn_nodes_(from.conn_nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BLEd_message.NodesList)
}

void NodesList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodesList_node_5fmessage_2eproto.base);
}

NodesList::~NodesList() {
  // @@protoc_insertion_point(destructor:BLEd_message.NodesList)
  SharedDtor();
}

void NodesList::SharedDtor() {
}

void NodesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodesList& NodesList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodesList_node_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void NodesList::Clear() {
// @@protoc_insertion_point(message_clear_start:BLEd_message.NodesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conn_nodes_.Clear();
  _internal_metadata_.Clear();
}

const char* NodesList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BLEd_message.Node conn_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conn_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodesList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLEd_message.NodesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BLEd_message.Node conn_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conn_nodes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_conn_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BLEd_message.NodesList)
  return target;
}

size_t NodesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BLEd_message.NodesList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BLEd_message.Node conn_nodes = 1;
  total_size += 1UL * this->_internal_conn_nodes_size();
  for (const auto& msg : this->conn_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodesList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLEd_message.NodesList)
  GOOGLE_DCHECK_NE(&from, this);
  const NodesList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodesList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLEd_message.NodesList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLEd_message.NodesList)
    MergeFrom(*source);
  }
}

void NodesList::MergeFrom(const NodesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLEd_message.NodesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conn_nodes_.MergeFrom(from.conn_nodes_);
}

void NodesList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLEd_message.NodesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesList::CopyFrom(const NodesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLEd_message.NodesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesList::IsInitialized() const {
  return true;
}

void NodesList::InternalSwap(NodesList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  conn_nodes_.InternalSwap(&other->conn_nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BLEd_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BLEd_message::NodeConnectionInfo* Arena::CreateMaybeMessage< ::BLEd_message::NodeConnectionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::BLEd_message::NodeConnectionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BLEd_message::NodeConnnectionParameters* Arena::CreateMaybeMessage< ::BLEd_message::NodeConnnectionParameters >(Arena* arena) {
  return Arena::CreateInternal< ::BLEd_message::NodeConnnectionParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::BLEd_message::Node* Arena::CreateMaybeMessage< ::BLEd_message::Node >(Arena* arena) {
  return Arena::CreateInternal< ::BLEd_message::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::BLEd_message::NodesList* Arena::CreateMaybeMessage< ::BLEd_message::NodesList >(Arena* arena) {
  return Arena::CreateInternal< ::BLEd_message::NodesList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
