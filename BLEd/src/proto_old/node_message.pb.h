// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_message.proto

#ifndef PROTOBUF_node_5fmessage_2eproto__INCLUDED
#define PROTOBUF_node_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace BLEd_message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_node_5fmessage_2eproto();
void protobuf_AssignDesc_node_5fmessage_2eproto();
void protobuf_ShutdownFile_node_5fmessage_2eproto();

class Node;
class NodeConnectionInfo;
class NodeConnnectionParameters;
class NodesList;

// ===================================================================

class NodeConnectionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BLEd_message.NodeConnectionInfo) */ {
 public:
  NodeConnectionInfo();
  virtual ~NodeConnectionInfo();

  NodeConnectionInfo(const NodeConnectionInfo& from);

  inline NodeConnectionInfo& operator=(const NodeConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeConnectionInfo& default_instance();

  void Swap(NodeConnectionInfo* other);

  // implements Message ----------------------------------------------

  inline NodeConnectionInfo* New() const { return New(NULL); }

  NodeConnectionInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeConnectionInfo& from);
  void MergeFrom(const NodeConnectionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeConnectionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int32 handle() const;
  void set_handle(::google::protobuf::int32 value);

  // optional int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 out = 3;
  void clear_out();
  static const int kOutFieldNumber = 3;
  ::google::protobuf::int32 out() const;
  void set_out(::google::protobuf::int32 value);

  // optional int32 state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 link_mode = 5;
  void clear_link_mode();
  static const int kLinkModeFieldNumber = 5;
  ::google::protobuf::int32 link_mode() const;
  void set_link_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BLEd_message.NodeConnectionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 handle_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 out_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 link_mode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_5fmessage_2eproto();
  friend void protobuf_AssignDesc_node_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_node_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static NodeConnectionInfo* default_instance_;
};
// -------------------------------------------------------------------

class NodeConnnectionParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BLEd_message.NodeConnnectionParameters) */ {
 public:
  NodeConnnectionParameters();
  virtual ~NodeConnnectionParameters();

  NodeConnnectionParameters(const NodeConnnectionParameters& from);

  inline NodeConnnectionParameters& operator=(const NodeConnnectionParameters& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeConnnectionParameters& default_instance();

  void Swap(NodeConnnectionParameters* other);

  // implements Message ----------------------------------------------

  inline NodeConnnectionParameters* New() const { return New(NULL); }

  NodeConnnectionParameters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeConnnectionParameters& from);
  void MergeFrom(const NodeConnnectionParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeConnnectionParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 conn_interval_min = 1;
  void clear_conn_interval_min();
  static const int kConnIntervalMinFieldNumber = 1;
  ::google::protobuf::int32 conn_interval_min() const;
  void set_conn_interval_min(::google::protobuf::int32 value);

  // optional int32 conn_interval_max = 2;
  void clear_conn_interval_max();
  static const int kConnIntervalMaxFieldNumber = 2;
  ::google::protobuf::int32 conn_interval_max() const;
  void set_conn_interval_max(::google::protobuf::int32 value);

  // optional int32 conn_latency = 3;
  void clear_conn_latency();
  static const int kConnLatencyFieldNumber = 3;
  ::google::protobuf::int32 conn_latency() const;
  void set_conn_latency(::google::protobuf::int32 value);

  // optional int32 supervision_timeout = 4;
  void clear_supervision_timeout();
  static const int kSupervisionTimeoutFieldNumber = 4;
  ::google::protobuf::int32 supervision_timeout() const;
  void set_supervision_timeout(::google::protobuf::int32 value);

  // optional int32 minimum_ce_length = 5;
  void clear_minimum_ce_length();
  static const int kMinimumCeLengthFieldNumber = 5;
  ::google::protobuf::int32 minimum_ce_length() const;
  void set_minimum_ce_length(::google::protobuf::int32 value);

  // optional int32 maximum_ce_length = 6;
  void clear_maximum_ce_length();
  static const int kMaximumCeLengthFieldNumber = 6;
  ::google::protobuf::int32 maximum_ce_length() const;
  void set_maximum_ce_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BLEd_message.NodeConnnectionParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 conn_interval_min_;
  ::google::protobuf::int32 conn_interval_max_;
  ::google::protobuf::int32 conn_latency_;
  ::google::protobuf::int32 supervision_timeout_;
  ::google::protobuf::int32 minimum_ce_length_;
  ::google::protobuf::int32 maximum_ce_length_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_5fmessage_2eproto();
  friend void protobuf_AssignDesc_node_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_node_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static NodeConnnectionParameters* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BLEd_message.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hw_address = 1;
  void clear_hw_address();
  static const int kHwAddressFieldNumber = 1;
  const ::std::string& hw_address() const;
  void set_hw_address(const ::std::string& value);
  void set_hw_address(const char* value);
  void set_hw_address(const char* value, size_t size);
  ::std::string* mutable_hw_address();
  ::std::string* release_hw_address();
  void set_allocated_hw_address(::std::string* hw_address);

  // optional int32 hw_address_type = 2;
  void clear_hw_address_type();
  static const int kHwAddressTypeFieldNumber = 2;
  ::google::protobuf::int32 hw_address_type() const;
  void set_hw_address_type(::google::protobuf::int32 value);

  // optional int32 connection_state = 3;
  void clear_connection_state();
  static const int kConnectionStateFieldNumber = 3;
  ::google::protobuf::int32 connection_state() const;
  void set_connection_state(::google::protobuf::int32 value);

  // optional string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string ipv6_address = 5;
  void clear_ipv6_address();
  static const int kIpv6AddressFieldNumber = 5;
  const ::std::string& ipv6_address() const;
  void set_ipv6_address(const ::std::string& value);
  void set_ipv6_address(const char* value);
  void set_ipv6_address(const char* value, size_t size);
  ::std::string* mutable_ipv6_address();
  ::std::string* release_ipv6_address();
  void set_allocated_ipv6_address(::std::string* ipv6_address);

  // optional string localLinkAddress = 6;
  void clear_locallinkaddress();
  static const int kLocalLinkAddressFieldNumber = 6;
  const ::std::string& locallinkaddress() const;
  void set_locallinkaddress(const ::std::string& value);
  void set_locallinkaddress(const char* value);
  void set_locallinkaddress(const char* value, size_t size);
  ::std::string* mutable_locallinkaddress();
  ::std::string* release_locallinkaddress();
  void set_allocated_locallinkaddress(::std::string* locallinkaddress);

  // optional .BLEd_message.NodeConnectionInfo conn_info = 7;
  bool has_conn_info() const;
  void clear_conn_info();
  static const int kConnInfoFieldNumber = 7;
  const ::BLEd_message::NodeConnectionInfo& conn_info() const;
  ::BLEd_message::NodeConnectionInfo* mutable_conn_info();
  ::BLEd_message::NodeConnectionInfo* release_conn_info();
  void set_allocated_conn_info(::BLEd_message::NodeConnectionInfo* conn_info);

  // optional .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
  bool has_conn_parameter() const;
  void clear_conn_parameter();
  static const int kConnParameterFieldNumber = 8;
  const ::BLEd_message::NodeConnnectionParameters& conn_parameter() const;
  ::BLEd_message::NodeConnnectionParameters* mutable_conn_parameter();
  ::BLEd_message::NodeConnnectionParameters* release_conn_parameter();
  void set_allocated_conn_parameter(::BLEd_message::NodeConnnectionParameters* conn_parameter);

  // @@protoc_insertion_point(class_scope:BLEd_message.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hw_address_;
  ::google::protobuf::int32 hw_address_type_;
  ::google::protobuf::int32 connection_state_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_address_;
  ::google::protobuf::internal::ArenaStringPtr locallinkaddress_;
  ::BLEd_message::NodeConnectionInfo* conn_info_;
  ::BLEd_message::NodeConnnectionParameters* conn_parameter_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_5fmessage_2eproto();
  friend void protobuf_AssignDesc_node_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_node_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class NodesList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BLEd_message.NodesList) */ {
 public:
  NodesList();
  virtual ~NodesList();

  NodesList(const NodesList& from);

  inline NodesList& operator=(const NodesList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodesList& default_instance();

  void Swap(NodesList* other);

  // implements Message ----------------------------------------------

  inline NodesList* New() const { return New(NULL); }

  NodesList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodesList& from);
  void MergeFrom(const NodesList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodesList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BLEd_message.Node conn_nodes = 1;
  int conn_nodes_size() const;
  void clear_conn_nodes();
  static const int kConnNodesFieldNumber = 1;
  const ::BLEd_message::Node& conn_nodes(int index) const;
  ::BLEd_message::Node* mutable_conn_nodes(int index);
  ::BLEd_message::Node* add_conn_nodes();
  ::google::protobuf::RepeatedPtrField< ::BLEd_message::Node >*
      mutable_conn_nodes();
  const ::google::protobuf::RepeatedPtrField< ::BLEd_message::Node >&
      conn_nodes() const;

  // @@protoc_insertion_point(class_scope:BLEd_message.NodesList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BLEd_message::Node > conn_nodes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_5fmessage_2eproto();
  friend void protobuf_AssignDesc_node_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_node_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static NodesList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeConnectionInfo

// optional int32 handle = 1;
inline void NodeConnectionInfo::clear_handle() {
  handle_ = 0;
}
inline ::google::protobuf::int32 NodeConnectionInfo::handle() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.handle)
  return handle_;
}
inline void NodeConnectionInfo::set_handle(::google::protobuf::int32 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.handle)
}

// optional int32 type = 2;
inline void NodeConnectionInfo::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 NodeConnectionInfo::type() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.type)
  return type_;
}
inline void NodeConnectionInfo::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.type)
}

// optional int32 out = 3;
inline void NodeConnectionInfo::clear_out() {
  out_ = 0;
}
inline ::google::protobuf::int32 NodeConnectionInfo::out() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.out)
  return out_;
}
inline void NodeConnectionInfo::set_out(::google::protobuf::int32 value) {
  
  out_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.out)
}

// optional int32 state = 4;
inline void NodeConnectionInfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 NodeConnectionInfo::state() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.state)
  return state_;
}
inline void NodeConnectionInfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.state)
}

// optional int32 link_mode = 5;
inline void NodeConnectionInfo::clear_link_mode() {
  link_mode_ = 0;
}
inline ::google::protobuf::int32 NodeConnectionInfo::link_mode() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.link_mode)
  return link_mode_;
}
inline void NodeConnectionInfo::set_link_mode(::google::protobuf::int32 value) {
  
  link_mode_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.link_mode)
}

// -------------------------------------------------------------------

// NodeConnnectionParameters

// optional int32 conn_interval_min = 1;
inline void NodeConnnectionParameters::clear_conn_interval_min() {
  conn_interval_min_ = 0;
}
inline ::google::protobuf::int32 NodeConnnectionParameters::conn_interval_min() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_interval_min)
  return conn_interval_min_;
}
inline void NodeConnnectionParameters::set_conn_interval_min(::google::protobuf::int32 value) {
  
  conn_interval_min_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_interval_min)
}

// optional int32 conn_interval_max = 2;
inline void NodeConnnectionParameters::clear_conn_interval_max() {
  conn_interval_max_ = 0;
}
inline ::google::protobuf::int32 NodeConnnectionParameters::conn_interval_max() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_interval_max)
  return conn_interval_max_;
}
inline void NodeConnnectionParameters::set_conn_interval_max(::google::protobuf::int32 value) {
  
  conn_interval_max_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_interval_max)
}

// optional int32 conn_latency = 3;
inline void NodeConnnectionParameters::clear_conn_latency() {
  conn_latency_ = 0;
}
inline ::google::protobuf::int32 NodeConnnectionParameters::conn_latency() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_latency)
  return conn_latency_;
}
inline void NodeConnnectionParameters::set_conn_latency(::google::protobuf::int32 value) {
  
  conn_latency_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_latency)
}

// optional int32 supervision_timeout = 4;
inline void NodeConnnectionParameters::clear_supervision_timeout() {
  supervision_timeout_ = 0;
}
inline ::google::protobuf::int32 NodeConnnectionParameters::supervision_timeout() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.supervision_timeout)
  return supervision_timeout_;
}
inline void NodeConnnectionParameters::set_supervision_timeout(::google::protobuf::int32 value) {
  
  supervision_timeout_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.supervision_timeout)
}

// optional int32 minimum_ce_length = 5;
inline void NodeConnnectionParameters::clear_minimum_ce_length() {
  minimum_ce_length_ = 0;
}
inline ::google::protobuf::int32 NodeConnnectionParameters::minimum_ce_length() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.minimum_ce_length)
  return minimum_ce_length_;
}
inline void NodeConnnectionParameters::set_minimum_ce_length(::google::protobuf::int32 value) {
  
  minimum_ce_length_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.minimum_ce_length)
}

// optional int32 maximum_ce_length = 6;
inline void NodeConnnectionParameters::clear_maximum_ce_length() {
  maximum_ce_length_ = 0;
}
inline ::google::protobuf::int32 NodeConnnectionParameters::maximum_ce_length() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.maximum_ce_length)
  return maximum_ce_length_;
}
inline void NodeConnnectionParameters::set_maximum_ce_length(::google::protobuf::int32 value) {
  
  maximum_ce_length_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.maximum_ce_length)
}

// -------------------------------------------------------------------

// Node

// optional string hw_address = 1;
inline void Node::clear_hw_address() {
  hw_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::hw_address() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.hw_address)
  return hw_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_hw_address(const ::std::string& value) {
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.hw_address)
}
inline void Node::set_hw_address(const char* value) {
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.hw_address)
}
inline void Node::set_hw_address(const char* value, size_t size) {
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.hw_address)
}
inline ::std::string* Node::mutable_hw_address() {
  
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.hw_address)
  return hw_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_hw_address() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.hw_address)
  
  return hw_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_hw_address(::std::string* hw_address) {
  if (hw_address != NULL) {
    
  } else {
    
  }
  hw_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hw_address);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.hw_address)
}

// optional int32 hw_address_type = 2;
inline void Node::clear_hw_address_type() {
  hw_address_type_ = 0;
}
inline ::google::protobuf::int32 Node::hw_address_type() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.hw_address_type)
  return hw_address_type_;
}
inline void Node::set_hw_address_type(::google::protobuf::int32 value) {
  
  hw_address_type_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.Node.hw_address_type)
}

// optional int32 connection_state = 3;
inline void Node::clear_connection_state() {
  connection_state_ = 0;
}
inline ::google::protobuf::int32 Node::connection_state() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.connection_state)
  return connection_state_;
}
inline void Node::set_connection_state(::google::protobuf::int32 value) {
  
  connection_state_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.Node.connection_state)
}

// optional string name = 4;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.name)
}
inline void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.name)
}
inline ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.name)
}

// optional string ipv6_address = 5;
inline void Node::clear_ipv6_address() {
  ipv6_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::ipv6_address() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.ipv6_address)
  return ipv6_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_ipv6_address(const ::std::string& value) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.ipv6_address)
}
inline void Node::set_ipv6_address(const char* value) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.ipv6_address)
}
inline void Node::set_ipv6_address(const char* value, size_t size) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.ipv6_address)
}
inline ::std::string* Node::mutable_ipv6_address() {
  
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.ipv6_address)
  return ipv6_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_ipv6_address() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.ipv6_address)
  
  return ipv6_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_ipv6_address(::std::string* ipv6_address) {
  if (ipv6_address != NULL) {
    
  } else {
    
  }
  ipv6_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_address);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.ipv6_address)
}

// optional string localLinkAddress = 6;
inline void Node::clear_locallinkaddress() {
  locallinkaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::locallinkaddress() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.localLinkAddress)
  return locallinkaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_locallinkaddress(const ::std::string& value) {
  
  locallinkaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.localLinkAddress)
}
inline void Node::set_locallinkaddress(const char* value) {
  
  locallinkaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.localLinkAddress)
}
inline void Node::set_locallinkaddress(const char* value, size_t size) {
  
  locallinkaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.localLinkAddress)
}
inline ::std::string* Node::mutable_locallinkaddress() {
  
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.localLinkAddress)
  return locallinkaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_locallinkaddress() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.localLinkAddress)
  
  return locallinkaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_locallinkaddress(::std::string* locallinkaddress) {
  if (locallinkaddress != NULL) {
    
  } else {
    
  }
  locallinkaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locallinkaddress);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.localLinkAddress)
}

// optional .BLEd_message.NodeConnectionInfo conn_info = 7;
inline bool Node::has_conn_info() const {
  return !_is_default_instance_ && conn_info_ != NULL;
}
inline void Node::clear_conn_info() {
  if (GetArenaNoVirtual() == NULL && conn_info_ != NULL) delete conn_info_;
  conn_info_ = NULL;
}
inline const ::BLEd_message::NodeConnectionInfo& Node::conn_info() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.conn_info)
  return conn_info_ != NULL ? *conn_info_ : *default_instance_->conn_info_;
}
inline ::BLEd_message::NodeConnectionInfo* Node::mutable_conn_info() {
  
  if (conn_info_ == NULL) {
    conn_info_ = new ::BLEd_message::NodeConnectionInfo;
  }
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.conn_info)
  return conn_info_;
}
inline ::BLEd_message::NodeConnectionInfo* Node::release_conn_info() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.conn_info)
  
  ::BLEd_message::NodeConnectionInfo* temp = conn_info_;
  conn_info_ = NULL;
  return temp;
}
inline void Node::set_allocated_conn_info(::BLEd_message::NodeConnectionInfo* conn_info) {
  delete conn_info_;
  conn_info_ = conn_info;
  if (conn_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.conn_info)
}

// optional .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
inline bool Node::has_conn_parameter() const {
  return !_is_default_instance_ && conn_parameter_ != NULL;
}
inline void Node::clear_conn_parameter() {
  if (GetArenaNoVirtual() == NULL && conn_parameter_ != NULL) delete conn_parameter_;
  conn_parameter_ = NULL;
}
inline const ::BLEd_message::NodeConnnectionParameters& Node::conn_parameter() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.conn_parameter)
  return conn_parameter_ != NULL ? *conn_parameter_ : *default_instance_->conn_parameter_;
}
inline ::BLEd_message::NodeConnnectionParameters* Node::mutable_conn_parameter() {
  
  if (conn_parameter_ == NULL) {
    conn_parameter_ = new ::BLEd_message::NodeConnnectionParameters;
  }
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.conn_parameter)
  return conn_parameter_;
}
inline ::BLEd_message::NodeConnnectionParameters* Node::release_conn_parameter() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.conn_parameter)
  
  ::BLEd_message::NodeConnnectionParameters* temp = conn_parameter_;
  conn_parameter_ = NULL;
  return temp;
}
inline void Node::set_allocated_conn_parameter(::BLEd_message::NodeConnnectionParameters* conn_parameter) {
  delete conn_parameter_;
  conn_parameter_ = conn_parameter;
  if (conn_parameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.conn_parameter)
}

// -------------------------------------------------------------------

// NodesList

// repeated .BLEd_message.Node conn_nodes = 1;
inline int NodesList::conn_nodes_size() const {
  return conn_nodes_.size();
}
inline void NodesList::clear_conn_nodes() {
  conn_nodes_.Clear();
}
inline const ::BLEd_message::Node& NodesList::conn_nodes(int index) const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_.Get(index);
}
inline ::BLEd_message::Node* NodesList::mutable_conn_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_.Mutable(index);
}
inline ::BLEd_message::Node* NodesList::add_conn_nodes() {
  // @@protoc_insertion_point(field_add:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BLEd_message::Node >*
NodesList::mutable_conn_nodes() {
  // @@protoc_insertion_point(field_mutable_list:BLEd_message.NodesList.conn_nodes)
  return &conn_nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BLEd_message::Node >&
NodesList::conn_nodes() const {
  // @@protoc_insertion_point(field_list:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BLEd_message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_node_5fmessage_2eproto__INCLUDED
