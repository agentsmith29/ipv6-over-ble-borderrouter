// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BLEd_message {

namespace {

const ::google::protobuf::Descriptor* NodeConnectionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeConnectionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeConnnectionParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeConnnectionParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodesList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_node_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_node_5fmessage_2eproto() {
  protobuf_AddDesc_node_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "node_message.proto");
  GOOGLE_CHECK(file != NULL);
  NodeConnectionInfo_descriptor_ = file->message_type(0);
  static const int NodeConnectionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnectionInfo, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnectionInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnectionInfo, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnectionInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnectionInfo, link_mode_),
  };
  NodeConnectionInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeConnectionInfo_descriptor_,
      NodeConnectionInfo::default_instance_,
      NodeConnectionInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeConnectionInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnectionInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnectionInfo, _is_default_instance_));
  NodeConnnectionParameters_descriptor_ = file->message_type(1);
  static const int NodeConnnectionParameters_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnnectionParameters, conn_interval_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnnectionParameters, conn_interval_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnnectionParameters, conn_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnnectionParameters, supervision_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnnectionParameters, minimum_ce_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnnectionParameters, maximum_ce_length_),
  };
  NodeConnnectionParameters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeConnnectionParameters_descriptor_,
      NodeConnnectionParameters::default_instance_,
      NodeConnnectionParameters_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeConnnectionParameters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnnectionParameters, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnnectionParameters, _is_default_instance_));
  Node_descriptor_ = file->message_type(2);
  static const int Node_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, hw_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, hw_address_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, connection_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, ipv6_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, locallinkaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, conn_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, conn_parameter_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  NodesList_descriptor_ = file->message_type(3);
  static const int NodesList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesList, conn_nodes_),
  };
  NodesList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodesList_descriptor_,
      NodesList::default_instance_,
      NodesList_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodesList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_node_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeConnectionInfo_descriptor_, &NodeConnectionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeConnnectionParameters_descriptor_, &NodeConnnectionParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodesList_descriptor_, &NodesList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_node_5fmessage_2eproto() {
  delete NodeConnectionInfo::default_instance_;
  delete NodeConnectionInfo_reflection_;
  delete NodeConnnectionParameters::default_instance_;
  delete NodeConnnectionParameters_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete NodesList::default_instance_;
  delete NodesList_reflection_;
}

void protobuf_AddDesc_node_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_node_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022node_message.proto\022\014BLEd_message\"a\n\022No"
    "deConnectionInfo\022\016\n\006handle\030\001 \001(\005\022\014\n\004type"
    "\030\002 \001(\005\022\013\n\003out\030\003 \001(\005\022\r\n\005state\030\004 \001(\005\022\021\n\tli"
    "nk_mode\030\005 \001(\005\"\272\001\n\031NodeConnnectionParamet"
    "ers\022\031\n\021conn_interval_min\030\001 \001(\005\022\031\n\021conn_i"
    "nterval_max\030\002 \001(\005\022\024\n\014conn_latency\030\003 \001(\005\022"
    "\033\n\023supervision_timeout\030\004 \001(\005\022\031\n\021minimum_"
    "ce_length\030\005 \001(\005\022\031\n\021maximum_ce_length\030\006 \001"
    "(\005\"\201\002\n\004Node\022\022\n\nhw_address\030\001 \001(\t\022\027\n\017hw_ad"
    "dress_type\030\002 \001(\005\022\030\n\020connection_state\030\003 \001"
    "(\005\022\014\n\004name\030\004 \001(\t\022\024\n\014ipv6_address\030\005 \001(\t\022\030"
    "\n\020localLinkAddress\030\006 \001(\t\0223\n\tconn_info\030\007 "
    "\001(\0132 .BLEd_message.NodeConnectionInfo\022\?\n"
    "\016conn_parameter\030\010 \001(\0132\'.BLEd_message.Nod"
    "eConnnectionParameters\"3\n\tNodesList\022&\n\nc"
    "onn_nodes\030\001 \003(\0132\022.BLEd_message.Nodeb\006pro"
    "to3", 643);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node_message.proto", &protobuf_RegisterTypes);
  NodeConnectionInfo::default_instance_ = new NodeConnectionInfo();
  NodeConnnectionParameters::default_instance_ = new NodeConnnectionParameters();
  Node::default_instance_ = new Node();
  NodesList::default_instance_ = new NodesList();
  NodeConnectionInfo::default_instance_->InitAsDefaultInstance();
  NodeConnnectionParameters::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  NodesList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_node_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_node_5fmessage_2eproto {
  StaticDescriptorInitializer_node_5fmessage_2eproto() {
    protobuf_AddDesc_node_5fmessage_2eproto();
  }
} static_descriptor_initializer_node_5fmessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeConnectionInfo::kHandleFieldNumber;
const int NodeConnectionInfo::kTypeFieldNumber;
const int NodeConnectionInfo::kOutFieldNumber;
const int NodeConnectionInfo::kStateFieldNumber;
const int NodeConnectionInfo::kLinkModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeConnectionInfo::NodeConnectionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLEd_message.NodeConnectionInfo)
}

void NodeConnectionInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeConnectionInfo::NodeConnectionInfo(const NodeConnectionInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLEd_message.NodeConnectionInfo)
}

void NodeConnectionInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  handle_ = 0;
  type_ = 0;
  out_ = 0;
  state_ = 0;
  link_mode_ = 0;
}

NodeConnectionInfo::~NodeConnectionInfo() {
  // @@protoc_insertion_point(destructor:BLEd_message.NodeConnectionInfo)
  SharedDtor();
}

void NodeConnectionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeConnectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeConnectionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeConnectionInfo_descriptor_;
}

const NodeConnectionInfo& NodeConnectionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_5fmessage_2eproto();
  return *default_instance_;
}

NodeConnectionInfo* NodeConnectionInfo::default_instance_ = NULL;

NodeConnectionInfo* NodeConnectionInfo::New(::google::protobuf::Arena* arena) const {
  NodeConnectionInfo* n = new NodeConnectionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BLEd_message.NodeConnectionInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NodeConnectionInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NodeConnectionInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(handle_, link_mode_);

#undef ZR_HELPER_
#undef ZR_

}

bool NodeConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLEd_message.NodeConnectionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_out;
        break;
      }

      // optional int32 out = 3;
      case 3: {
        if (tag == 24) {
         parse_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_link_mode;
        break;
      }

      // optional int32 link_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_link_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLEd_message.NodeConnectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLEd_message.NodeConnectionInfo)
  return false;
#undef DO_
}

void NodeConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLEd_message.NodeConnectionInfo)
  // optional int32 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 out = 3;
  if (this->out() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->out(), output);
  }

  // optional int32 state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 link_mode = 5;
  if (this->link_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->link_mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:BLEd_message.NodeConnectionInfo)
}

::google::protobuf::uint8* NodeConnectionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLEd_message.NodeConnectionInfo)
  // optional int32 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle(), target);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 out = 3;
  if (this->out() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->out(), target);
  }

  // optional int32 state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 link_mode = 5;
  if (this->link_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->link_mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BLEd_message.NodeConnectionInfo)
  return target;
}

int NodeConnectionInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLEd_message.NodeConnectionInfo)
  int total_size = 0;

  // optional int32 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->handle());
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 out = 3;
  if (this->out() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out());
  }

  // optional int32 state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  // optional int32 link_mode = 5;
  if (this->link_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_mode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeConnectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLEd_message.NodeConnectionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeConnectionInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeConnectionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLEd_message.NodeConnectionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLEd_message.NodeConnectionInfo)
    MergeFrom(*source);
  }
}

void NodeConnectionInfo::MergeFrom(const NodeConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLEd_message.NodeConnectionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.out() != 0) {
    set_out(from.out());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.link_mode() != 0) {
    set_link_mode(from.link_mode());
  }
}

void NodeConnectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLEd_message.NodeConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConnectionInfo::CopyFrom(const NodeConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLEd_message.NodeConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConnectionInfo::IsInitialized() const {

  return true;
}

void NodeConnectionInfo::Swap(NodeConnectionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeConnectionInfo::InternalSwap(NodeConnectionInfo* other) {
  std::swap(handle_, other->handle_);
  std::swap(type_, other->type_);
  std::swap(out_, other->out_);
  std::swap(state_, other->state_);
  std::swap(link_mode_, other->link_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeConnectionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeConnectionInfo_descriptor_;
  metadata.reflection = NodeConnectionInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeConnectionInfo

// optional int32 handle = 1;
void NodeConnectionInfo::clear_handle() {
  handle_ = 0;
}
 ::google::protobuf::int32 NodeConnectionInfo::handle() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.handle)
  return handle_;
}
 void NodeConnectionInfo::set_handle(::google::protobuf::int32 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.handle)
}

// optional int32 type = 2;
void NodeConnectionInfo::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 NodeConnectionInfo::type() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.type)
  return type_;
}
 void NodeConnectionInfo::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.type)
}

// optional int32 out = 3;
void NodeConnectionInfo::clear_out() {
  out_ = 0;
}
 ::google::protobuf::int32 NodeConnectionInfo::out() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.out)
  return out_;
}
 void NodeConnectionInfo::set_out(::google::protobuf::int32 value) {
  
  out_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.out)
}

// optional int32 state = 4;
void NodeConnectionInfo::clear_state() {
  state_ = 0;
}
 ::google::protobuf::int32 NodeConnectionInfo::state() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.state)
  return state_;
}
 void NodeConnectionInfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.state)
}

// optional int32 link_mode = 5;
void NodeConnectionInfo::clear_link_mode() {
  link_mode_ = 0;
}
 ::google::protobuf::int32 NodeConnectionInfo::link_mode() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnectionInfo.link_mode)
  return link_mode_;
}
 void NodeConnectionInfo::set_link_mode(::google::protobuf::int32 value) {
  
  link_mode_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnectionInfo.link_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeConnnectionParameters::kConnIntervalMinFieldNumber;
const int NodeConnnectionParameters::kConnIntervalMaxFieldNumber;
const int NodeConnnectionParameters::kConnLatencyFieldNumber;
const int NodeConnnectionParameters::kSupervisionTimeoutFieldNumber;
const int NodeConnnectionParameters::kMinimumCeLengthFieldNumber;
const int NodeConnnectionParameters::kMaximumCeLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeConnnectionParameters::NodeConnnectionParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLEd_message.NodeConnnectionParameters)
}

void NodeConnnectionParameters::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeConnnectionParameters::NodeConnnectionParameters(const NodeConnnectionParameters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLEd_message.NodeConnnectionParameters)
}

void NodeConnnectionParameters::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  conn_interval_min_ = 0;
  conn_interval_max_ = 0;
  conn_latency_ = 0;
  supervision_timeout_ = 0;
  minimum_ce_length_ = 0;
  maximum_ce_length_ = 0;
}

NodeConnnectionParameters::~NodeConnnectionParameters() {
  // @@protoc_insertion_point(destructor:BLEd_message.NodeConnnectionParameters)
  SharedDtor();
}

void NodeConnnectionParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeConnnectionParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeConnnectionParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeConnnectionParameters_descriptor_;
}

const NodeConnnectionParameters& NodeConnnectionParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_5fmessage_2eproto();
  return *default_instance_;
}

NodeConnnectionParameters* NodeConnnectionParameters::default_instance_ = NULL;

NodeConnnectionParameters* NodeConnnectionParameters::New(::google::protobuf::Arena* arena) const {
  NodeConnnectionParameters* n = new NodeConnnectionParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeConnnectionParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:BLEd_message.NodeConnnectionParameters)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NodeConnnectionParameters, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NodeConnnectionParameters*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(conn_interval_min_, maximum_ce_length_);

#undef ZR_HELPER_
#undef ZR_

}

bool NodeConnnectionParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLEd_message.NodeConnnectionParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 conn_interval_min = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conn_interval_min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_conn_interval_max;
        break;
      }

      // optional int32 conn_interval_max = 2;
      case 2: {
        if (tag == 16) {
         parse_conn_interval_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conn_interval_max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_conn_latency;
        break;
      }

      // optional int32 conn_latency = 3;
      case 3: {
        if (tag == 24) {
         parse_conn_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conn_latency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_supervision_timeout;
        break;
      }

      // optional int32 supervision_timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_supervision_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supervision_timeout_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minimum_ce_length;
        break;
      }

      // optional int32 minimum_ce_length = 5;
      case 5: {
        if (tag == 40) {
         parse_minimum_ce_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_ce_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maximum_ce_length;
        break;
      }

      // optional int32 maximum_ce_length = 6;
      case 6: {
        if (tag == 48) {
         parse_maximum_ce_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_ce_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLEd_message.NodeConnnectionParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLEd_message.NodeConnnectionParameters)
  return false;
#undef DO_
}

void NodeConnnectionParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLEd_message.NodeConnnectionParameters)
  // optional int32 conn_interval_min = 1;
  if (this->conn_interval_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->conn_interval_min(), output);
  }

  // optional int32 conn_interval_max = 2;
  if (this->conn_interval_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->conn_interval_max(), output);
  }

  // optional int32 conn_latency = 3;
  if (this->conn_latency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->conn_latency(), output);
  }

  // optional int32 supervision_timeout = 4;
  if (this->supervision_timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->supervision_timeout(), output);
  }

  // optional int32 minimum_ce_length = 5;
  if (this->minimum_ce_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minimum_ce_length(), output);
  }

  // optional int32 maximum_ce_length = 6;
  if (this->maximum_ce_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maximum_ce_length(), output);
  }

  // @@protoc_insertion_point(serialize_end:BLEd_message.NodeConnnectionParameters)
}

::google::protobuf::uint8* NodeConnnectionParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLEd_message.NodeConnnectionParameters)
  // optional int32 conn_interval_min = 1;
  if (this->conn_interval_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->conn_interval_min(), target);
  }

  // optional int32 conn_interval_max = 2;
  if (this->conn_interval_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->conn_interval_max(), target);
  }

  // optional int32 conn_latency = 3;
  if (this->conn_latency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->conn_latency(), target);
  }

  // optional int32 supervision_timeout = 4;
  if (this->supervision_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->supervision_timeout(), target);
  }

  // optional int32 minimum_ce_length = 5;
  if (this->minimum_ce_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minimum_ce_length(), target);
  }

  // optional int32 maximum_ce_length = 6;
  if (this->maximum_ce_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maximum_ce_length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BLEd_message.NodeConnnectionParameters)
  return target;
}

int NodeConnnectionParameters::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLEd_message.NodeConnnectionParameters)
  int total_size = 0;

  // optional int32 conn_interval_min = 1;
  if (this->conn_interval_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conn_interval_min());
  }

  // optional int32 conn_interval_max = 2;
  if (this->conn_interval_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conn_interval_max());
  }

  // optional int32 conn_latency = 3;
  if (this->conn_latency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conn_latency());
  }

  // optional int32 supervision_timeout = 4;
  if (this->supervision_timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->supervision_timeout());
  }

  // optional int32 minimum_ce_length = 5;
  if (this->minimum_ce_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minimum_ce_length());
  }

  // optional int32 maximum_ce_length = 6;
  if (this->maximum_ce_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_ce_length());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeConnnectionParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLEd_message.NodeConnnectionParameters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeConnnectionParameters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeConnnectionParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLEd_message.NodeConnnectionParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLEd_message.NodeConnnectionParameters)
    MergeFrom(*source);
  }
}

void NodeConnnectionParameters::MergeFrom(const NodeConnnectionParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLEd_message.NodeConnnectionParameters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.conn_interval_min() != 0) {
    set_conn_interval_min(from.conn_interval_min());
  }
  if (from.conn_interval_max() != 0) {
    set_conn_interval_max(from.conn_interval_max());
  }
  if (from.conn_latency() != 0) {
    set_conn_latency(from.conn_latency());
  }
  if (from.supervision_timeout() != 0) {
    set_supervision_timeout(from.supervision_timeout());
  }
  if (from.minimum_ce_length() != 0) {
    set_minimum_ce_length(from.minimum_ce_length());
  }
  if (from.maximum_ce_length() != 0) {
    set_maximum_ce_length(from.maximum_ce_length());
  }
}

void NodeConnnectionParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLEd_message.NodeConnnectionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConnnectionParameters::CopyFrom(const NodeConnnectionParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLEd_message.NodeConnnectionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConnnectionParameters::IsInitialized() const {

  return true;
}

void NodeConnnectionParameters::Swap(NodeConnnectionParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeConnnectionParameters::InternalSwap(NodeConnnectionParameters* other) {
  std::swap(conn_interval_min_, other->conn_interval_min_);
  std::swap(conn_interval_max_, other->conn_interval_max_);
  std::swap(conn_latency_, other->conn_latency_);
  std::swap(supervision_timeout_, other->supervision_timeout_);
  std::swap(minimum_ce_length_, other->minimum_ce_length_);
  std::swap(maximum_ce_length_, other->maximum_ce_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeConnnectionParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeConnnectionParameters_descriptor_;
  metadata.reflection = NodeConnnectionParameters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeConnnectionParameters

// optional int32 conn_interval_min = 1;
void NodeConnnectionParameters::clear_conn_interval_min() {
  conn_interval_min_ = 0;
}
 ::google::protobuf::int32 NodeConnnectionParameters::conn_interval_min() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_interval_min)
  return conn_interval_min_;
}
 void NodeConnnectionParameters::set_conn_interval_min(::google::protobuf::int32 value) {
  
  conn_interval_min_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_interval_min)
}

// optional int32 conn_interval_max = 2;
void NodeConnnectionParameters::clear_conn_interval_max() {
  conn_interval_max_ = 0;
}
 ::google::protobuf::int32 NodeConnnectionParameters::conn_interval_max() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_interval_max)
  return conn_interval_max_;
}
 void NodeConnnectionParameters::set_conn_interval_max(::google::protobuf::int32 value) {
  
  conn_interval_max_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_interval_max)
}

// optional int32 conn_latency = 3;
void NodeConnnectionParameters::clear_conn_latency() {
  conn_latency_ = 0;
}
 ::google::protobuf::int32 NodeConnnectionParameters::conn_latency() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.conn_latency)
  return conn_latency_;
}
 void NodeConnnectionParameters::set_conn_latency(::google::protobuf::int32 value) {
  
  conn_latency_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.conn_latency)
}

// optional int32 supervision_timeout = 4;
void NodeConnnectionParameters::clear_supervision_timeout() {
  supervision_timeout_ = 0;
}
 ::google::protobuf::int32 NodeConnnectionParameters::supervision_timeout() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.supervision_timeout)
  return supervision_timeout_;
}
 void NodeConnnectionParameters::set_supervision_timeout(::google::protobuf::int32 value) {
  
  supervision_timeout_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.supervision_timeout)
}

// optional int32 minimum_ce_length = 5;
void NodeConnnectionParameters::clear_minimum_ce_length() {
  minimum_ce_length_ = 0;
}
 ::google::protobuf::int32 NodeConnnectionParameters::minimum_ce_length() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.minimum_ce_length)
  return minimum_ce_length_;
}
 void NodeConnnectionParameters::set_minimum_ce_length(::google::protobuf::int32 value) {
  
  minimum_ce_length_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.minimum_ce_length)
}

// optional int32 maximum_ce_length = 6;
void NodeConnnectionParameters::clear_maximum_ce_length() {
  maximum_ce_length_ = 0;
}
 ::google::protobuf::int32 NodeConnnectionParameters::maximum_ce_length() const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodeConnnectionParameters.maximum_ce_length)
  return maximum_ce_length_;
}
 void NodeConnnectionParameters::set_maximum_ce_length(::google::protobuf::int32 value) {
  
  maximum_ce_length_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.NodeConnnectionParameters.maximum_ce_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kHwAddressFieldNumber;
const int Node::kHwAddressTypeFieldNumber;
const int Node::kConnectionStateFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kIpv6AddressFieldNumber;
const int Node::kLocalLinkAddressFieldNumber;
const int Node::kConnInfoFieldNumber;
const int Node::kConnParameterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLEd_message.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  conn_info_ = const_cast< ::BLEd_message::NodeConnectionInfo*>(&::BLEd_message::NodeConnectionInfo::default_instance());
  conn_parameter_ = const_cast< ::BLEd_message::NodeConnnectionParameters*>(&::BLEd_message::NodeConnnectionParameters::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLEd_message.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hw_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hw_address_type_ = 0;
  connection_state_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locallinkaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conn_info_ = NULL;
  conn_parameter_ = NULL;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:BLEd_message.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  hw_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locallinkaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete conn_info_;
    delete conn_parameter_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_5fmessage_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:BLEd_message.Node)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Node, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Node*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(hw_address_type_, connection_state_);
  hw_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locallinkaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && conn_info_ != NULL) delete conn_info_;
  conn_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && conn_parameter_ != NULL) delete conn_parameter_;
  conn_parameter_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLEd_message.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hw_address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hw_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hw_address().data(), this->hw_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BLEd_message.Node.hw_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hw_address_type;
        break;
      }

      // optional int32 hw_address_type = 2;
      case 2: {
        if (tag == 16) {
         parse_hw_address_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hw_address_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_connection_state;
        break;
      }

      // optional int32 connection_state = 3;
      case 3: {
        if (tag == 24) {
         parse_connection_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BLEd_message.Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ipv6_address;
        break;
      }

      // optional string ipv6_address = 5;
      case 5: {
        if (tag == 42) {
         parse_ipv6_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipv6_address().data(), this->ipv6_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BLEd_message.Node.ipv6_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_localLinkAddress;
        break;
      }

      // optional string localLinkAddress = 6;
      case 6: {
        if (tag == 50) {
         parse_localLinkAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locallinkaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locallinkaddress().data(), this->locallinkaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BLEd_message.Node.localLinkAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_conn_info;
        break;
      }

      // optional .BLEd_message.NodeConnectionInfo conn_info = 7;
      case 7: {
        if (tag == 58) {
         parse_conn_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conn_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_conn_parameter;
        break;
      }

      // optional .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
      case 8: {
        if (tag == 66) {
         parse_conn_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conn_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLEd_message.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLEd_message.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLEd_message.Node)
  // optional string hw_address = 1;
  if (this->hw_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hw_address().data(), this->hw_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.hw_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hw_address(), output);
  }

  // optional int32 hw_address_type = 2;
  if (this->hw_address_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hw_address_type(), output);
  }

  // optional int32 connection_state = 3;
  if (this->connection_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->connection_state(), output);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string ipv6_address = 5;
  if (this->ipv6_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6_address().data(), this->ipv6_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.ipv6_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ipv6_address(), output);
  }

  // optional string localLinkAddress = 6;
  if (this->locallinkaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locallinkaddress().data(), this->locallinkaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.localLinkAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->locallinkaddress(), output);
  }

  // optional .BLEd_message.NodeConnectionInfo conn_info = 7;
  if (this->has_conn_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->conn_info_, output);
  }

  // optional .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
  if (this->has_conn_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->conn_parameter_, output);
  }

  // @@protoc_insertion_point(serialize_end:BLEd_message.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLEd_message.Node)
  // optional string hw_address = 1;
  if (this->hw_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hw_address().data(), this->hw_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.hw_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hw_address(), target);
  }

  // optional int32 hw_address_type = 2;
  if (this->hw_address_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hw_address_type(), target);
  }

  // optional int32 connection_state = 3;
  if (this->connection_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->connection_state(), target);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string ipv6_address = 5;
  if (this->ipv6_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6_address().data(), this->ipv6_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.ipv6_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ipv6_address(), target);
  }

  // optional string localLinkAddress = 6;
  if (this->locallinkaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locallinkaddress().data(), this->locallinkaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BLEd_message.Node.localLinkAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->locallinkaddress(), target);
  }

  // optional .BLEd_message.NodeConnectionInfo conn_info = 7;
  if (this->has_conn_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->conn_info_, false, target);
  }

  // optional .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
  if (this->has_conn_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->conn_parameter_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BLEd_message.Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLEd_message.Node)
  int total_size = 0;

  // optional string hw_address = 1;
  if (this->hw_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hw_address());
  }

  // optional int32 hw_address_type = 2;
  if (this->hw_address_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hw_address_type());
  }

  // optional int32 connection_state = 3;
  if (this->connection_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->connection_state());
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string ipv6_address = 5;
  if (this->ipv6_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipv6_address());
  }

  // optional string localLinkAddress = 6;
  if (this->locallinkaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->locallinkaddress());
  }

  // optional .BLEd_message.NodeConnectionInfo conn_info = 7;
  if (this->has_conn_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conn_info_);
  }

  // optional .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
  if (this->has_conn_parameter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conn_parameter_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLEd_message.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLEd_message.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLEd_message.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLEd_message.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.hw_address().size() > 0) {

    hw_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hw_address_);
  }
  if (from.hw_address_type() != 0) {
    set_hw_address_type(from.hw_address_type());
  }
  if (from.connection_state() != 0) {
    set_connection_state(from.connection_state());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ipv6_address().size() > 0) {

    ipv6_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_address_);
  }
  if (from.locallinkaddress().size() > 0) {

    locallinkaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locallinkaddress_);
  }
  if (from.has_conn_info()) {
    mutable_conn_info()->::BLEd_message::NodeConnectionInfo::MergeFrom(from.conn_info());
  }
  if (from.has_conn_parameter()) {
    mutable_conn_parameter()->::BLEd_message::NodeConnnectionParameters::MergeFrom(from.conn_parameter());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLEd_message.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLEd_message.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  hw_address_.Swap(&other->hw_address_);
  std::swap(hw_address_type_, other->hw_address_type_);
  std::swap(connection_state_, other->connection_state_);
  name_.Swap(&other->name_);
  ipv6_address_.Swap(&other->ipv6_address_);
  locallinkaddress_.Swap(&other->locallinkaddress_);
  std::swap(conn_info_, other->conn_info_);
  std::swap(conn_parameter_, other->conn_parameter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string hw_address = 1;
void Node::clear_hw_address() {
  hw_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::hw_address() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.hw_address)
  return hw_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_hw_address(const ::std::string& value) {
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.hw_address)
}
 void Node::set_hw_address(const char* value) {
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.hw_address)
}
 void Node::set_hw_address(const char* value, size_t size) {
  
  hw_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.hw_address)
}
 ::std::string* Node::mutable_hw_address() {
  
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.hw_address)
  return hw_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_hw_address() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.hw_address)
  
  return hw_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_hw_address(::std::string* hw_address) {
  if (hw_address != NULL) {
    
  } else {
    
  }
  hw_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hw_address);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.hw_address)
}

// optional int32 hw_address_type = 2;
void Node::clear_hw_address_type() {
  hw_address_type_ = 0;
}
 ::google::protobuf::int32 Node::hw_address_type() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.hw_address_type)
  return hw_address_type_;
}
 void Node::set_hw_address_type(::google::protobuf::int32 value) {
  
  hw_address_type_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.Node.hw_address_type)
}

// optional int32 connection_state = 3;
void Node::clear_connection_state() {
  connection_state_ = 0;
}
 ::google::protobuf::int32 Node::connection_state() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.connection_state)
  return connection_state_;
}
 void Node::set_connection_state(::google::protobuf::int32 value) {
  
  connection_state_ = value;
  // @@protoc_insertion_point(field_set:BLEd_message.Node.connection_state)
}

// optional string name = 4;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.name)
}
 void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.name)
}
 void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.name)
}
 ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.name)
}

// optional string ipv6_address = 5;
void Node::clear_ipv6_address() {
  ipv6_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::ipv6_address() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.ipv6_address)
  return ipv6_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_ipv6_address(const ::std::string& value) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.ipv6_address)
}
 void Node::set_ipv6_address(const char* value) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.ipv6_address)
}
 void Node::set_ipv6_address(const char* value, size_t size) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.ipv6_address)
}
 ::std::string* Node::mutable_ipv6_address() {
  
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.ipv6_address)
  return ipv6_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_ipv6_address() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.ipv6_address)
  
  return ipv6_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_ipv6_address(::std::string* ipv6_address) {
  if (ipv6_address != NULL) {
    
  } else {
    
  }
  ipv6_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_address);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.ipv6_address)
}

// optional string localLinkAddress = 6;
void Node::clear_locallinkaddress() {
  locallinkaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::locallinkaddress() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.localLinkAddress)
  return locallinkaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_locallinkaddress(const ::std::string& value) {
  
  locallinkaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BLEd_message.Node.localLinkAddress)
}
 void Node::set_locallinkaddress(const char* value) {
  
  locallinkaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BLEd_message.Node.localLinkAddress)
}
 void Node::set_locallinkaddress(const char* value, size_t size) {
  
  locallinkaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BLEd_message.Node.localLinkAddress)
}
 ::std::string* Node::mutable_locallinkaddress() {
  
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.localLinkAddress)
  return locallinkaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_locallinkaddress() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.localLinkAddress)
  
  return locallinkaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_locallinkaddress(::std::string* locallinkaddress) {
  if (locallinkaddress != NULL) {
    
  } else {
    
  }
  locallinkaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locallinkaddress);
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.localLinkAddress)
}

// optional .BLEd_message.NodeConnectionInfo conn_info = 7;
bool Node::has_conn_info() const {
  return !_is_default_instance_ && conn_info_ != NULL;
}
void Node::clear_conn_info() {
  if (GetArenaNoVirtual() == NULL && conn_info_ != NULL) delete conn_info_;
  conn_info_ = NULL;
}
const ::BLEd_message::NodeConnectionInfo& Node::conn_info() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.conn_info)
  return conn_info_ != NULL ? *conn_info_ : *default_instance_->conn_info_;
}
::BLEd_message::NodeConnectionInfo* Node::mutable_conn_info() {
  
  if (conn_info_ == NULL) {
    conn_info_ = new ::BLEd_message::NodeConnectionInfo;
  }
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.conn_info)
  return conn_info_;
}
::BLEd_message::NodeConnectionInfo* Node::release_conn_info() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.conn_info)
  
  ::BLEd_message::NodeConnectionInfo* temp = conn_info_;
  conn_info_ = NULL;
  return temp;
}
void Node::set_allocated_conn_info(::BLEd_message::NodeConnectionInfo* conn_info) {
  delete conn_info_;
  conn_info_ = conn_info;
  if (conn_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.conn_info)
}

// optional .BLEd_message.NodeConnnectionParameters conn_parameter = 8;
bool Node::has_conn_parameter() const {
  return !_is_default_instance_ && conn_parameter_ != NULL;
}
void Node::clear_conn_parameter() {
  if (GetArenaNoVirtual() == NULL && conn_parameter_ != NULL) delete conn_parameter_;
  conn_parameter_ = NULL;
}
const ::BLEd_message::NodeConnnectionParameters& Node::conn_parameter() const {
  // @@protoc_insertion_point(field_get:BLEd_message.Node.conn_parameter)
  return conn_parameter_ != NULL ? *conn_parameter_ : *default_instance_->conn_parameter_;
}
::BLEd_message::NodeConnnectionParameters* Node::mutable_conn_parameter() {
  
  if (conn_parameter_ == NULL) {
    conn_parameter_ = new ::BLEd_message::NodeConnnectionParameters;
  }
  // @@protoc_insertion_point(field_mutable:BLEd_message.Node.conn_parameter)
  return conn_parameter_;
}
::BLEd_message::NodeConnnectionParameters* Node::release_conn_parameter() {
  // @@protoc_insertion_point(field_release:BLEd_message.Node.conn_parameter)
  
  ::BLEd_message::NodeConnnectionParameters* temp = conn_parameter_;
  conn_parameter_ = NULL;
  return temp;
}
void Node::set_allocated_conn_parameter(::BLEd_message::NodeConnnectionParameters* conn_parameter) {
  delete conn_parameter_;
  conn_parameter_ = conn_parameter;
  if (conn_parameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BLEd_message.Node.conn_parameter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodesList::kConnNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodesList::NodesList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BLEd_message.NodesList)
}

void NodesList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodesList::NodesList(const NodesList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BLEd_message.NodesList)
}

void NodesList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NodesList::~NodesList() {
  // @@protoc_insertion_point(destructor:BLEd_message.NodesList)
  SharedDtor();
}

void NodesList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodesList_descriptor_;
}

const NodesList& NodesList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_5fmessage_2eproto();
  return *default_instance_;
}

NodesList* NodesList::default_instance_ = NULL;

NodesList* NodesList::New(::google::protobuf::Arena* arena) const {
  NodesList* n = new NodesList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodesList::Clear() {
// @@protoc_insertion_point(message_clear_start:BLEd_message.NodesList)
  conn_nodes_.Clear();
}

bool NodesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BLEd_message.NodesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BLEd_message.Node conn_nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_conn_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_conn_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_conn_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BLEd_message.NodesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BLEd_message.NodesList)
  return false;
#undef DO_
}

void NodesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BLEd_message.NodesList)
  // repeated .BLEd_message.Node conn_nodes = 1;
  for (unsigned int i = 0, n = this->conn_nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->conn_nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BLEd_message.NodesList)
}

::google::protobuf::uint8* NodesList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BLEd_message.NodesList)
  // repeated .BLEd_message.Node conn_nodes = 1;
  for (unsigned int i = 0, n = this->conn_nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->conn_nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BLEd_message.NodesList)
  return target;
}

int NodesList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BLEd_message.NodesList)
  int total_size = 0;

  // repeated .BLEd_message.Node conn_nodes = 1;
  total_size += 1 * this->conn_nodes_size();
  for (int i = 0; i < this->conn_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conn_nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodesList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BLEd_message.NodesList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodesList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodesList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BLEd_message.NodesList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BLEd_message.NodesList)
    MergeFrom(*source);
  }
}

void NodesList::MergeFrom(const NodesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BLEd_message.NodesList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  conn_nodes_.MergeFrom(from.conn_nodes_);
}

void NodesList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BLEd_message.NodesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesList::CopyFrom(const NodesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BLEd_message.NodesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesList::IsInitialized() const {

  return true;
}

void NodesList::Swap(NodesList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodesList::InternalSwap(NodesList* other) {
  conn_nodes_.UnsafeArenaSwap(&other->conn_nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodesList_descriptor_;
  metadata.reflection = NodesList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodesList

// repeated .BLEd_message.Node conn_nodes = 1;
int NodesList::conn_nodes_size() const {
  return conn_nodes_.size();
}
void NodesList::clear_conn_nodes() {
  conn_nodes_.Clear();
}
const ::BLEd_message::Node& NodesList::conn_nodes(int index) const {
  // @@protoc_insertion_point(field_get:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_.Get(index);
}
::BLEd_message::Node* NodesList::mutable_conn_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_.Mutable(index);
}
::BLEd_message::Node* NodesList::add_conn_nodes() {
  // @@protoc_insertion_point(field_add:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::BLEd_message::Node >*
NodesList::mutable_conn_nodes() {
  // @@protoc_insertion_point(field_mutable_list:BLEd_message.NodesList.conn_nodes)
  return &conn_nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::BLEd_message::Node >&
NodesList::conn_nodes() const {
  // @@protoc_insertion_point(field_list:BLEd_message.NodesList.conn_nodes)
  return conn_nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace BLEd_message

// @@protoc_insertion_point(global_scope)
